import cv2
import numpy as np
import sys

def stackImages(scale,imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range ( 0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape [:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]), None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y]= cv2.cvtColor( imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank]*rows
        hor_con = [imageBlank]*rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None,scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor= np.hstack(imgArray)
        ver = hor
    return ver

def get_progressbar_str(progress):
    END = 170
    MAX_LEN = 30
    BAR_LEN = int(MAX_LEN * progress)
    return ('Progress:[' + '=' * BAR_LEN +
            ('>' if BAR_LEN < MAX_LEN else '') +
            ' ' * (MAX_LEN - BAR_LEN) +
            '] %.1f%%' % (progress * 100.))

def mean_filter(image, filter_size):
    from itertools import product

    # new image's dimensions since
    # the border values are discarded
    new_img_height = image.shape[0] - filter_size + 1
    new_img_width = image.shape[1] - filter_size + 1

    # store each window in numpy array to
    # average them at once to obtain the
    # new pixel values
    # preserve color channels
    windows = np.empty((new_img_height * new_img_width, filter_size ** 2, 3))

    row = 0
    # store each window in "windows" as the filter
    # traces the image

    print('Start mean_filter')
    print('It will take a little while...')
    inc = 0
    for i, j in product(range(new_img_height), range(new_img_width)):
        # simply, all pixels under the filter side to side
        # with their RGB channels
        windows[row, :, :] = np.ravel(image[i:i + filter_size, j:j + filter_size]).reshape(-1, 3)
        row += 1

    filtered_image = np.empty((new_img_height * new_img_width, 3))

    # calculate the mean for RGB values seperately for each window
    for r in range(new_img_height * new_img_width):
        filtered_image[r, :] = windows[r, :, :].mean(axis=0)
        # Print progress
        inc = inc + 1
        sys.stderr.write('\r\033[K' + get_progressbar_str(inc / (new_img_height * new_img_width)))
        sys.stderr.flush()

    # after calculating the means for each channel and row
    # in windows, reshape the array to obtain resultant
    # image with RGB channels
    filtered_image = filtered_image.reshape(new_img_height, new_img_width, 3).astype(np.uint8)

    sys.stderr.write('\n')
    sys.stderr.flush()
    return filtered_image

# Read image
img = cv2.imread("Resources/lenaNoise.png")
# Mean Filter
out = mean_filter(img, 3)
out_1 = mean_filter(img, 5)
out_2 = mean_filter(img, 7)
print('Completed!')
# Save result
imgStack = stackImages(0.6, ([img, out], [out_1, out_2]))
cv2.imshow("Img", imgStack)
cv2.waitKey(0)
cv2.destroyAllWindows()
